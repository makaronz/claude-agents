---
description: Testing and validation patterns for Claude agents
---

# Testing and Validation Patterns

## Form Validation with Zod

### Schema Definition
```typescript
import { z } from 'zod';

// Project validation schema
const projectSchema = z.object({
  name: z.string()
    .min(1, 'Project name is required')
    .max(100, 'Name too long'),
  description: z.string()
    .min(10, 'Description must be at least 10 characters')
    .max(500, 'Description too long'),
  clientId: z.string().min(1, 'Please select a client'),
  budget: z.number()
    .min(0, 'Budget must be positive')
    .max(10000000, 'Budget too high'),
  deadline: z.string().min(1, 'Deadline is required'),
  priority: z.enum(['Low', 'Medium', 'High', 'Critical'] as const),
  teamMembers: z.array(z.string()).min(1, 'Select at least one team member'),
});

// Client validation schema
const clientSchema = z.object({
  name: z.string().min(1, 'Client name is required'),
  email: z.string().email('Invalid email address'),
  phone: z.string().optional(),
  company: z.string().min(1, 'Company name is required'),
  industry: z.string().min(1, 'Industry is required'),
  budgetRange: z.string().min(1, 'Budget range is required'),
});
```

### Form Integration
```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

const FormComponent = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    setValue,
  } = useForm<ProjectFormData>({
    resolver: zodResolver(projectSchema),
    defaultValues: {
      name: '',
      description: '',
      clientId: '',
      budget: 0,
      deadline: '',
      priority: 'Medium',
      teamMembers: [],
    },
  });

  const onSubmit = async (data: ProjectFormData) => {
    try {
      // Validate data before submission
      const validatedData = projectSchema.parse(data);
      console.log('Validated data:', validatedData);
    } catch (error) {
      if (error instanceof z.ZodError) {
        console.error('Validation errors:', error.errors);
      }
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {/* Form fields with error display */}
    </form>
  );
};
```

## Component Testing Patterns

### Unit Testing with Testing Library
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { ProjectForm } from './ProjectForm';

describe('ProjectForm', () => {
  it('should render all form fields', () => {
    render(<ProjectForm onSuccess={jest.fn()} />);
    
    expect(screen.getByLabelText(/project name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/description/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/client/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/budget/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/deadline/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/priority/i)).toBeInTheDocument();
  });

  it('should validate required fields', async () => {
    const user = userEvent.setup();
    render(<ProjectForm onSuccess={jest.fn()} />);
    
    const submitButton = screen.getByRole('button', { name: /create project/i });
    await user.click(submitButton);
    
    await waitFor(() => {
      expect(screen.getByText(/project name is required/i)).toBeInTheDocument();
      expect(screen.getByText(/description must be at least 10 characters/i)).toBeInTheDocument();
    });
  });

  it('should submit form with valid data', async () => {
    const user = userEvent.setup();
    const mockOnSuccess = jest.fn();
    render(<ProjectForm onSuccess={mockOnSuccess} />);
    
    // Fill form
    await user.type(screen.getByLabelText(/project name/i), 'Test Project');
    await user.type(screen.getByLabelText(/description/i), 'This is a test project description');
    await user.selectOptions(screen.getByLabelText(/client/i), 'client-1');
    await user.type(screen.getByLabelText(/budget/i), '50000');
    await user.type(screen.getByLabelText(/deadline/i), '2024-06-15');
    
    // Select team members
    await user.click(screen.getByRole('checkbox', { name: /john doe/i }));
    await user.click(screen.getByRole('checkbox', { name: /jane smith/i }));
    
    // Submit form
    await user.click(screen.getByRole('button', { name: /create project/i }));
    
    await waitFor(() => {
      expect(mockOnSuccess).toHaveBeenCalled();
    });
  });
});
```

### Context Testing
```typescript
import { renderHook, act } from '@testing-library/react';
import { ProjectProvider, useProjectContext } from './ProjectContext';

const wrapper = ({ children }: { children: React.ReactNode }) => (
  <ProjectProvider>{children}</ProjectProvider>
);

describe('ProjectContext', () => {
  it('should add project correctly', () => {
    const { result } = renderHook(() => useProjectContext(), { wrapper });
    
    const newProject = {
      id: 'test-1',
      name: 'Test Project',
      description: 'Test description',
      clientId: 'client-1',
      clientName: 'Test Client',
      status: 'Not Started' as const,
      priority: 'Medium' as const,
      progress: 0,
      budget: 50000,
      deadline: '2024-06-15',
      teamMembers: [],
      createdAt: '2024-01-01',
      updatedAt: '2024-01-01',
    };
    
    act(() => {
      result.current.addProject(newProject);
    });
    
    expect(result.current.state.projects).toContain(newProject);
  });

  it('should filter projects correctly', () => {
    const { result } = renderHook(() => useProjectContext(), { wrapper });
    
    // Add test projects
    act(() => {
      result.current.addProject({ ...mockProject, status: 'In Progress' });
      result.current.addProject({ ...mockProject, status: 'Planning' });
    });
    
    // Set filter
    act(() => {
      result.current.setFilters({ status: 'In Progress' });
    });
    
    expect(result.current.state.filters.status).toBe('In Progress');
  });
});
```

## E2E Testing with Playwright

### Form Submission Testing
```typescript
import { test, expect } from '@playwright/test';

test.describe('Project Creation', () => {
  test('should create a new project successfully', async ({ page }) => {
    await page.goto('/projects');
    
    // Open create project modal
    await page.click('[data-testid="create-project-btn"]');
    
    // Fill form
    await page.fill('[data-testid="project-name"]', 'E2E Test Project');
    await page.fill('[data-testid="project-description"]', 'This is an E2E test project');
    await page.selectOption('[data-testid="client-select"]', 'client-1');
    await page.fill('[data-testid="project-budget"]', '75000');
    await page.fill('[data-testid="project-deadline"]', '2024-07-01');
    
    // Select team members
    await page.check('[data-testid="team-member-creative-director"]');
    await page.check('[data-testid="team-member-copywriter"]');
    
    // Submit form
    await page.click('[data-testid="submit-project"]');
    
    // Verify project was created
    await expect(page.locator('[data-testid="project-list"]')).toContainText('E2E Test Project');
    
    // Verify modal is closed
    await expect(page.locator('[data-testid="create-project-modal"]')).not.toBeVisible();
  });

  test('should show validation errors for invalid data', async ({ page }) => {
    await page.goto('/projects');
    await page.click('[data-testid="create-project-btn"]');
    
    // Try to submit empty form
    await page.click('[data-testid="submit-project"]');
    
    // Check for validation errors
    await expect(page.locator('[data-testid="project-name-error"]')).toBeVisible();
    await expect(page.locator('[data-testid="project-description-error"]')).toBeVisible();
  });
});
```

### Squad Mode Testing
```typescript
test.describe('Squad Mode', () => {
  test('should run squad analysis successfully', async ({ page }) => {
    await page.goto('/squad');
    
    // Enable squad mode
    await page.click('[data-testid="squad-mode-toggle"]');
    
    // Enter creative brief
    await page.fill('[data-testid="brief-input"]', 'Create a campaign for eco-friendly sneakers targeting Gen Z');
    
    // Start analysis
    await page.click('[data-testid="start-squad-analysis"]');
    
    // Wait for analysis to complete
    await expect(page.locator('[data-testid="specialist-progress"]')).toBeVisible();
    
    // Wait for synthesis
    await expect(page.locator('[data-testid="squad-synthesis"]')).toBeVisible({ timeout: 30000 });
    
    // Verify synthesis contains expected elements
    await expect(page.locator('[data-testid="synthesis-score"]')).toBeVisible();
    await expect(page.locator('[data-testid="action-plan"]')).toBeVisible();
  });
});
```

## Error Boundary Testing

### Component Error Handling
```typescript
import { render, screen } from '@testing-library/react';
import { ErrorBoundary } from './ErrorBoundary';

const ThrowError = ({ shouldThrow }: { shouldThrow: boolean }) => {
  if (shouldThrow) {
    throw new Error('Test error');
  }
  return <div>No error</div>;
};

describe('ErrorBoundary', () => {
  it('should catch and display errors', () => {
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
    
    render(
      <ErrorBoundary>
        <ThrowError shouldThrow={true} />
      </ErrorBoundary>
    );
    
    expect(screen.getByText(/something went wrong/i)).toBeInTheDocument();
    
    consoleSpy.mockRestore();
  });

  it('should render children when no error', () => {
    render(
      <ErrorBoundary>
        <ThrowError shouldThrow={false} />
      </ErrorBoundary>
    );
    
    expect(screen.getByText('No error')).toBeInTheDocument();
  });
});
```

## Mock Data and Fixtures

### Test Data Factories
```typescript
// Test data factories
export const createMockProject = (overrides: Partial<Project> = {}): Project => ({
  id: 'project-1',
  name: 'Test Project',
  description: 'Test description',
  clientId: 'client-1',
  clientName: 'Test Client',
  status: 'In Progress',
  priority: 'High',
  progress: 75,
  budget: 250000,
  deadline: '2024-06-15',
  teamMembers: [
    { id: 'user-1', name: 'John Doe', role: 'Creative Director' },
  ],
  createdAt: '2024-01-01',
  updatedAt: '2024-01-15',
  ...overrides,
});

export const createMockClient = (overrides: Partial<Client> = {}): Client => ({
  id: 'client-1',
  name: 'Test Client',
  email: 'test@client.com',
  phone: '+1-555-0123',
  company: 'Test Company',
  industry: 'Technology',
  budgetRange: '$100k-$500k',
  notes: 'Test notes',
  activeProjects: 1,
  lastContact: '2024-01-15',
  createdAt: '2024-01-01',
  updatedAt: '2024-01-15',
  ...overrides,
});
```

### API Mocking
```typescript
// Mock API responses
export const mockApiResponses = {
  projects: {
    list: [createMockProject(), createMockProject({ id: 'project-2' })],
    create: createMockProject({ id: 'project-new' }),
    update: createMockProject({ name: 'Updated Project' }),
  },
  clients: {
    list: [createMockClient(), createMockClient({ id: 'client-2' })],
  },
};
```

## Performance Testing

### Component Performance
```typescript
import { render } from '@testing-library/react';
import { ProjectList } from './ProjectList';

describe('ProjectList Performance', () => {
  it('should render large lists efficiently', () => {
    const largeProjectList = Array.from({ length: 1000 }, (_, i) => 
      createMockProject({ id: `project-${i}`, name: `Project ${i}` })
    );
    
    const startTime = performance.now();
    render(<ProjectList projects={largeProjectList} />);
    const endTime = performance.now();
    
    // Should render within 100ms
    expect(endTime - startTime).toBeLessThan(100);
  });
});
```

## Accessibility Testing

### Screen Reader Testing
```typescript
import { render, screen } from '@testing-library/react';
import { axe, toHaveNoViolations } from 'jest-axe';

expect.extend(toHaveNoViolations);

describe('Accessibility', () => {
  it('should not have accessibility violations', async () => {
    const { container } = render(<ProjectForm onSuccess={jest.fn()} />);
    
    const results = await axe(container);
    expect(results).toHaveNoViolations();
  });

  it('should have proper ARIA labels', () => {
    render(<ProjectForm onSuccess={jest.fn()} />);
    
    expect(screen.getByRole('button', { name: /create project/i })).toBeInTheDocument();
    expect(screen.getByLabelText(/project name/i)).toBeInTheDocument();
  });
});
```