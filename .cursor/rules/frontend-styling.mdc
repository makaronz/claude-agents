---
globs: *.tsx,*.ts,*.css
description: Frontend styling patterns and best practices for CSS, Tailwind, and design systems
---

# Frontend Styling Guidelines

## Tailwind CSS Design System

### Color Palette
- **Primary**: `text-primary-600`, `bg-primary-600` - Main brand colors
- **Secondary**: `text-secondary-600`, `bg-secondary-600` - Accent colors for Squad Mode
- **Success**: `text-success-600`, `bg-success-600` - Success states
- **Warning**: `text-warning-600`, `bg-warning-600` - Warning states
- **Error**: `text-error-600`, `bg-error-600` - Error states

### Component Variants
```typescript
// Button variants using class-variance-authority
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md font-medium transition-all duration-200",
  {
    variants: {
      variant: {
        default: "bg-primary-600 text-white hover:bg-primary-700",
        outline: "border border-gray-300 bg-white text-gray-700 hover:bg-gray-50",
        squad: "bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700",
        ghost: "text-gray-600 hover:bg-gray-100",
      },
      size: {
        sm: "px-3 py-1.5 text-sm",
        md: "px-4 py-2 text-sm",
        lg: "px-6 py-3 text-base",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "md",
    },
  }
);
```

### Card Components
```typescript
// Card variants for different use cases
const cardVariants = cva(
  "rounded-lg border bg-white shadow-sm",
  {
    variants: {
      variant: {
        default: "border-gray-200",
        squad: "border-transparent bg-gradient-to-br from-purple-50 to-blue-50",
        elevated: "border-gray-200 shadow-lg",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);
```

## Animation and Transitions

### Consistent Transition Classes
- **Standard**: `transition-all duration-200`
- **Slow**: `transition-all duration-300`
- **Fast**: `transition-all duration-150`
- **Hover effects**: `hover:shadow-lg transition-shadow`
- **Focus states**: `focus:ring-2 focus:ring-primary-500 focus:ring-offset-2`

### Loading States
```typescript
// Loading spinner component
const LoadingSpinner = () => (
  <div className="animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-primary-600" />
);

// Loading button state
<Button disabled={isLoading} loading={isLoading}>
  {isLoading ? 'Creating...' : 'Create Project'}
</Button>
```

## Responsive Design

### Breakpoint Strategy
- **Mobile First**: Design for mobile, then enhance for larger screens
- **Grid Layouts**: Use CSS Grid for complex layouts, Flexbox for simpler ones
- **Responsive Typography**: Use `text-sm md:text-base lg:text-lg` pattern

### Layout Patterns
```typescript
// Responsive grid
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

// Responsive spacing
<div className="p-4 md:p-6 lg:p-8">

// Responsive text
<h1 className="text-2xl md:text-3xl lg:text-4xl font-bold">
```

## Form Styling

### Input Components
```typescript
// Consistent input styling
const inputClasses = "mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm";

// Error states
const errorInputClasses = "border-red-500 focus:ring-red-500 focus:border-red-500";
```

### Form Layout
```typescript
// Form field wrapper
<div className="space-y-6">
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-1">
      Label Text <span className="text-red-500">*</span>
    </label>
    <input className={inputClasses} />
    {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
  </div>
</div>
```

## Dark Mode Considerations

### Color Scheme Support
```typescript
// Dark mode classes
const darkModeClasses = "bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100";
const darkBorderClasses = "border-gray-300 dark:border-gray-600";
```

## Accessibility

### Focus Management
- Always provide visible focus indicators
- Use `focus:ring-2 focus:ring-primary-500` for focus states
- Ensure proper tab order

### Color Contrast
- Maintain WCAG AA compliance
- Use semantic colors for states (success, warning, error)
- Provide alternative indicators beyond color

## Component Styling Patterns

### Modal/Dialog Styling
```typescript
// Modal overlay
<div className="fixed inset-0 z-40 bg-gray-600 bg-opacity-75" />

// Modal content
<div className="bg-white rounded-lg shadow-xl max-w-lg w-full mx-4">
```

### Status Indicators
```typescript
// Status badges
<span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
  Active
</span>
```

### Progress Indicators
```typescript
// Progress bar
<div className="w-full bg-gray-200 rounded-full h-2">
  <div 
    className="bg-primary-600 h-2 rounded-full transition-all duration-300" 
    style={{ width: `${progress}%` }}
  />
</div>
```